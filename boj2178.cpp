#include <iostream>
#include <string>
#include <stack>
#include <queue>

#define X first
#define Y second
using namespace std;
int dist[102][102]; 
string board[102]; //아 스트링으로 받은다음에 이중배열처럼 쓰는구나
int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};
int n, m;

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < n; i++) 
		cin >> board[i];
	for (int i = 0; i < n; i++) { //dist 배열을 -1로 초기화해놓으면 따로 vis배열 없이 해당 역할을 대신할 수 있다. 
		fill(dist[i], dist[i] + m, -1);
	}
	queue <pair<int, int>> q;
	q.push({ 0, 0 });
	dist[0][0] = 1; // 시작 위치도 포함되서 거리 1로 입력
	while (!q.empty()) {
		pair <int,int> cur = q.front();
		q.pop();
		for (int dir= 0; dir < 4; dir++) {
			int nx = cur.X + dx[dir];
			int ny = cur.Y + dy[dir];
			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (dist[nx][ny] >= 0 || board[nx][ny] != '1') continue; //board문자열 배열의 char 원소이므로 작은 따옴표 써줘야된다.
			dist[nx][ny] = dist[cur.X][cur.Y] + 1;//기준점 보다 거리 1만큼 늘어난다.
			q.push({ nx, ny });
		}
	}
	cout << dist[n-1][m-1];
}